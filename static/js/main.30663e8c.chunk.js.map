{"version":3,"sources":["components/AddRecipe.js","components/SelectRecipe.js","components/DisplayRecipe.js","RecipeBox.js","serviceWorker.js","index.js"],"names":["AddRecipe","handleSubmit","e","preventDefault","completeRecipe","name","target","value","ingredients","instructions","_this","props","pushRecipe","toggleAdd","_this2","this","react_default","a","createElement","className","onClick","addRecipe","id","onSubmit","type","placeholder","Component","SelectRecipe","handleChange","allRecipes","recipes","map","recipe","push","key","size","currentRecipe","onChange","Instructions","paragraph","Ingredients","ingredient","DisplayRecipe","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClick","recipeName","removeRecipe","handleClick2","setState","contentEditable","state","alterRecipe","displayRecipe","_this$props","forEach","index","onBlur","Title","RecipeBox","updateRecipe","_e$target","innerText","recipeCopy","current","concat","toConsumableArray","recipeIndex","val","recipesCopy","splice","newIndex","componentDidMount","localStorage","getItem","JSON","parse","setItem","stringify","componentDidUpdate","components_SelectRecipe","components_AddRecipe","components_DisplayRecipe","Boolean","window","location","hostname","match","ReactDOM","render","src_RecipeBox","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30663e8c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass AddRecipe extends Component {\r\n    handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        let name = e.target.name.value\r\n        let ingredients = [e.target.ingredients.value]\r\n        let instructions = [e.target.instructions.value]\r\n        const completeRecipe = { name, ingredients, instructions }\r\n        this.props.pushRecipe(completeRecipe)\r\n        this.props.toggleAdd()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"AddRecipe\">\r\n                <button onClick={() => this.props.toggleAdd()} className=\"AddRecipe__toggle\">Add Recipe</button>\r\n                {this.props.addRecipe === true ?\r\n                    <div className=\"AddRecipe__container\">\r\n                        <form id=\"add-recipe\" onSubmit={this.handleSubmit}>\r\n                            <input type=\"text\" name=\"name\" placeholder=\"Recipe name\" />\r\n                            <input type=\"text\" name=\"ingredients\" placeholder=\"Recipe ingredients\" />\r\n                            <textarea name=\"instructions\" placeholder=\"Recipe instructions\" />\r\n                            <button>Add</button>\r\n                        </form>\r\n                    </div> :\r\n                    null\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddRecipe","import React, { Component } from 'react'\r\n\r\nclass SelectRecipe extends Component {\r\n    handleChange = (e) => {\r\n        this.props.handleChange(e.target.value)\r\n    }\r\n\r\n    render() {\r\n        const allRecipes = []\r\n        const { recipes } = this.props\r\n        recipes.map(recipe => {\r\n            return allRecipes.push(<option key={recipe.name} value={recipe.name}>{recipe.name}</option>)\r\n        })\r\n        return (\r\n            <form className=\"SelectRecipe\">\r\n                <select size=\"4\" value={this.props.currentRecipe} onChange={this.handleChange}>\r\n                    {allRecipes}\r\n                </select>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SelectRecipe","import React, { Component } from 'react'\r\n\r\nclass DisplayRecipe extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state={\r\n            contentEditable: false\r\n        }\r\n    }\r\n    handleClick = (recipeName) => {\r\n        this.props.removeRecipe(recipeName)\r\n    }\r\n\r\n    handleClick2 = () => {\r\n        this.setState({\r\n            contentEditable: !this.state.contentEditable\r\n        })\r\n    }\r\n\r\n    alterRecipe = (recipeName) => {\r\n        this.props.alterRecipe(recipeName)\r\n    }\r\n\r\n    render() {\r\n        let displayRecipe = []\r\n        const { recipes, currentRecipe } = this.props\r\n\r\n        recipes.forEach((recipe, index) => {\r\n            if (recipe.name !== currentRecipe) {\r\n                return\r\n            }\r\n            displayRecipe.push(\r\n                <div key={recipe.name} className=\"DisplayRecipe\">\r\n                    <div className=\"DisplayRecipeEdit\">\r\n                        <h2 id={index} className=\"RecipeName\" contentEditable={this.state.contentEditable} onBlur={this.alterRecipe}>\r\n                            {recipe.name}\r\n                        </h2>\r\n                    </div>\r\n                    <div className=\"btns\">\r\n                        <button onClick={() => this.handleClick(index)}><i className=\"far fa-trash-alt\"></i></button>\r\n                        {this.state.contentEditable === false ?\r\n                            <button onClick={() => this.handleClick2()}><i className=\"far fa-edit\"></i></button> \r\n                            :\r\n                            <button onClick={() => this.handleClick2()}><i className=\"far fa-check-square\"></i></button>\r\n                        }\r\n                    </div>\r\n                    <Ingredients recipe={recipe.ingredients} />\r\n                    <Instructions instructions={recipe.instructions} />\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div>{displayRecipe}</div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction Instructions(props) {\r\n    return (\r\n        <div className=\"Instructions\">\r\n            <h2>Instructions</h2>\r\n            {props.instructions.map(paragraph => <p key={paragraph[2]+'_'+paragraph[5]}>{paragraph}</p>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Ingredients(props) {\r\n    return (\r\n        <div className=\"Ingredients\">\r\n            <h2>Ingredients</h2>\r\n            <ul>\r\n                {props.recipe.map(ingredient => <li key={ingredient}>{ingredient}</li>)}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DisplayRecipe","import React, { Component } from 'react';\nimport AddRecipe            from './components/AddRecipe'\nimport SelectRecipe         from './components/SelectRecipe'\nimport DisplayRecipe        from './components/DisplayRecipe'\nimport './App.css';\n\n\n\n class RecipeBox extends Component {\n   constructor(props) {\n    super(props)\n    this.state = {\n      recipes: [\n        {\n          id: 1,\n          name: \"Chicken à la King\",\n          ingredients: [\"a chicken\", \"water\"],\n          instructions: [\"Cook a chicken\"]\n        },\n        {\n          id: 2,\n          name: \"Beets\",\n          ingredients: [\"five beets\"],\n          instructions: [\"Put beets in water\"]\n        },\n        {\n          id: 3,\n          name: \"Licorice à la Garbage\",\n          ingredients: [\"licorice\", \"garbage can\"],\n          instructions: [\"Put licorice in garbage\"]\n        },\n        {\n          id: 4,\n          name: 'Artichoke Pasta',\n          ingredients: ['2 tablespoons butter', '2 cloves garlic minced', '1 cup heavy cream', '3 / 4 teaspoon salt', '1 teaspoon fresh - ground black pepper', '2 1 / 2 cups canned, drained artichoke hearts(two 14 - ounce cans), rinsed and cut into halves or quarters', '3 / 4 pound fusilli'],\n          instructions: [\n            \"In a medium saucepan, melt the butter over moderately low heat. Add the garlic and cook for 30 seconds. Stir in the cream, salt, pepper, and artichoke hearts.\",\n            \"Cook until just heated through, about 3 minutes. In a large pot of boiling, salted water, cook the fusilli until just done, about 13 minutes. Drain the pasta and toss with the cream sauce, Parmesan, and chives.\"\n          ]\n        }\n      ],\n      currentRecipe: \"Beets\",\n      addRecipe: false\n    }\n   }\n  updateRecipe = (e) => {\n    this.setState({\n      currentRecipe: e\n    })\n  }\n\n  alterRecipe = (e) => {\n    const { innerText, id } = e.target\n    let recipeCopy = this.state.recipes\n    recipeCopy[id].name = innerText\n    this.setState({\n      recipes: recipeCopy,\n      currentRecipe: innerText\n    })\n  }\n\n  toggleAdd = () => {\n    this.setState((current) => ({\n      addRecipe: !current.addRecipe\n    }))\n  }\n\n  pushRecipe = (completeRecipe) => {\n    this.setState((current) => ({\n      recipes: [...current.recipes, completeRecipe]\n    }))\n  }\n\n  removeRecipe = (recipeIndex) => {\n    let val = 1\n    let recipesCopy = [...this.state.recipes]\n    if (recipeIndex === 0) {\n      val = -1\n    }\n    recipesCopy.splice(recipeIndex, 1)\n    let newIndex = this.state.recipes[recipeIndex - val].name\n    this.setState({\n      recipes: recipesCopy, \n      currentRecipe: newIndex\n    })\n  }\n\n  componentDidMount = () => {\n    if (!localStorage.getItem('localRecipes')) {\n      localStorage.setItem('localRecipes', JSON.stringify(this.state.recipes))\n    } else {\n      this.setState({\n        recipes: JSON.parse(localStorage.getItem('localRecipes'))\n      })\n    }\n  }\n  \n  componentDidUpdate = () => {\n      localStorage.setItem('localRecipes', JSON.stringify(this.state.recipes))\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"picture\">\n          <Title />\n          <SelectRecipe recipes={this.state.recipes} handleChange={this.updateRecipe} currentRecipe={this.state.currentRecipe} />\n          <AddRecipe addRecipe={this.state.addRecipe} toggleAdd={this.toggleAdd} pushRecipe={this.pushRecipe} />\n        </div>\n        <DisplayRecipe alterRecipe={this.alterRecipe} currentRecipe={this.state.currentRecipe} recipes={this.state.recipes} removeRecipe={this.removeRecipe} />\n      </div>\n    )\n  }\n}\n\nfunction Title() {\n  return (\n    <div className=\"Title\">\n      <i className=\"fab fa-free-code-camp\"></i>\n      <h1>RecipeBox</h1>\n    </div>\n  )\n}\n\n\n\n\nexport default RecipeBox;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RecipeBox from './RecipeBox';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<RecipeBox />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}